/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.usbhidpidtool;

import Hid4Java.HidWorkbench.*;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Properties;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Florian
 */
public class UsbHidPidToolUI extends javax.swing.JFrame implements KeyListener,MouseListener,ActionListener {

    /**
     * Creates new form UsbHidPidToolUI
     */
    public UsbHidPidToolUI() {
        initComponents();
        initUserClass();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        itemPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemSelectionList = new javax.swing.JList<>();
        reportPanel = new javax.swing.JTabbedPane();
        messagePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(buttonPanel, java.awt.BorderLayout.NORTH);

        itemPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Item Selector:"));
        itemPanel.setLayout(new javax.swing.BoxLayout(itemPanel, javax.swing.BoxLayout.PAGE_AXIS));

        itemSelectionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        itemSelectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(itemSelectionList);

        itemPanel.add(jScrollPane1);

        getContentPane().add(itemPanel, java.awt.BorderLayout.WEST);

        reportPanel.setPreferredSize(new java.awt.Dimension(800, 400));
        getContentPane().add(reportPanel, java.awt.BorderLayout.CENTER);

        messagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Messages:"));
        messagePanel.setLayout(new java.awt.BorderLayout());

        messageArea.setEditable(false);
        messageArea.setColumns(20);
        messageArea.setRows(5);
        jScrollPane2.setViewportView(messageArea);

        messagePanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(messagePanel, java.awt.BorderLayout.SOUTH);
        messagePanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeUserClass();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsbHidPidToolUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsbHidPidToolUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsbHidPidToolUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsbHidPidToolUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsbHidPidToolUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel itemPanel;
    private javax.swing.JList<String> itemSelectionList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JTabbedPane reportPanel;
    // End of variables declaration//GEN-END:variables

    // User Space Start
    // Properties
    private final File SETTINGSFILE = Paths.get("settings.properties").toAbsolutePath().toFile();
    private final File VERSIONSFILE = Paths.get("versions.properties").toAbsolutePath().toFile();
    
    private static final String STRING_APPNAME = "Hid-Pid-Tool";
    private static String STRING_COMPLETEVERSION;
    private static final String STRING_DEFAULT_MAINVERSION = "?";
    private static final String STRING_DEFAULT_SUBVERSION = "?";
    private static final String STRING_DEFAULT_BUILDVERSION = "?";
    
    private static final File FILE_DEFAULT_FILECHOOSERPATH = Paths.get("Reports").toAbsolutePath().toFile();
    
    private static final int INT_DEFAULT_APPPOSX = 50;
    private static final int INT_DEFAULT_APPPOSY = 50;
    private static final int INT_DEFAULT_APPWIDTH = 800;
    private static final int INT_DEFAULT_APPHEIGHT = 400;
    private static final float FLOAT_SIZEFACTOR_SUBWINDOW = 0.8f;
    
    private static final String STRING_MESSAGE_TITLE_FORMATTABLELOAD_OK = "Format table data loaded succesfully!";
    private static final String STRING_MESSAGE_TITLE_FORMATTABLELOAD_MINORERROR = "Format table data loaded with problems!";
    private static final String STRING_MESSAGE_TITLE_FORMATTABLELOAD_FATALERROR = "Format table data load failed!";
    private static final String STRING_MESSAGE_TITLE_REPORTFILELOAD_OK = "Report file loaded succesfully!";
    private static final String STRING_MESSAGE_TITLE_REPORTFILELOAD_MINORERROR = "Report file loaded with problems!";
    private static final String STRING_MESSAGE_TITLE_REPORTFILELOAD_FATALERROR = "Report file load failed!";
    private static final String STRING_MESSAGE_TITLE_REPORTFILESAVE_OK = "Report file saved succesfully!";
    private static final String STRING_MESSAGE_TITLE_REPORTFILESAVE_FATALERROR = "Report file save failed!";
    private static final String STRING_MESSAGE_TITLE_REPORTCREATED_OK = "Report table created succesfully!";
    
    private static final String STRING_MESSAGE_TITLE_UNSAFEDAPPCLOSECONFIRM = "Unstored data!";
    private static final String STRING_MESSAGE_BODY_UNSAFEDAPPCLOSECONFIRM = "Some data is not stored. Really close app?";
    private static final String STRING_MESSAGE_TITLE_REPORTRELOADCONFIRM = "Attention!";
    private static final String STRING_MESSAGE_BODY_REPORTRELOADCONFIRM = "Really discard selected report and reload from file?";
    private static final String STRING_MESSAGE_TITLE_REMOVEROWSCONFIRM = "Attention!";
    private static final String STRING_MESSAGE_BODY_REMOVEROWSCONFIRM = "Really remove all elements from selected report?";
    private static final String STRING_MESSAGE_TITLE_REPORTCLOSECONFIRM = "Unstored data!";
    private static final String STRING_MESSAGE_BODY_REPORTCLOSECONFIRM = "Report data is not stored. Really close report?";
    
    private static final String STRING_TITLE_SAVEALLREPORTS = "Saved-all report:";
    private static final String STRING_CONCLUSION_SAVEALLREPORTS = "Files processed";
    private static final String STRING_MESSAGE_SAVEALLREPORTS_SAVEDAS = "saved as";
    private static final String STRING_MESSAGE_SAVEALLREPORTS_NOTSAVED = "not saved";
    
    private static final String STRING_BUTTON_TOOLTIP_NEWREPORT = "Create a new empty report.";
    private static final String STRING_BUTTON_TOOLTIP_OPENREPORT = "Open an existing report from a file.";
    private static final String STRING_BUTTON_TOOLTIP_RELOADREPORT = "Discard all elements in the selected report and reload data from a file.";
    private static final String STRING_BUTTON_TOOLTIP_SAVEREPORT = "Save the selected report to origin file.";
    private static final String STRING_BUTTON_TOOLTIP_SAVEASREPORT = "Save the selected report with a new file name.";
    private static final String STRING_BUTTON_TOOLTIP_SAVEALLREPORT = "Save all open reports to it's origin files.";
    private static final String STRING_BUTTON_TOOLTIP_CLOSEREPORT = "Close the selected report without saving.";
    private static final String STRING_BUTTON_TOOLTIP_NEWELEMENT = "Create a new manual element in the selected report.";
    private static final String STRING_BUTTON_TOOLTIP_CHANGEALEMENT = "Edit the selected elements in the selected report.";
    private static final String STRING_BUTTON_TOOLTIP_REMOVEELEMENT = "Remove the selected elements in the selected report.";
    private static final String STRING_BUTTON_TOOLTIP_REMOVEALLELEMENT = "Remove all elements from the selected report.";
    private static final String STRING_BUTTON_TOOLTIP_MOVEUPELEMENT = "Move the selected elements one line up.";
    private static final String STRING_BUTTON_TOOLTIP_MOVEDOWNELEMENT = "Move the selected elements one line down.";
    private static final String STRING_BUTTON_TOOLTIP_COPYELEMENT = "Copy the selected elements to the clipboard.";
    private static final String STRING_BUTTON_TOOLTIP_PASTEELEMENT = "Paste the elements from clipboard to the selected line.";
    private static final String STRING_COMBOBOX_TOOLTIP_INSERTSELECT = "Select the logic for insert operations.";
    
    private final static Path ICONROOTPATH = Paths.get("src", "icons").toAbsolutePath();
    private final static File FILE_ICON_BUTTON_NEWREPORT = Paths.get(ICONROOTPATH.toString(), "ReportNew.png").toFile();
    private final static File FILE_ICON_BUTTON_OPENREPORT = Paths.get(ICONROOTPATH.toString(), "ReportOpen.png").toFile();
    private final static File FILE_ICON_BUTTON_RELOADREPORT = Paths.get(ICONROOTPATH.toString(), "ReportReload.png").toFile();
    private final static File FILE_ICON_BUTTON_SAVEREPORT = Paths.get(ICONROOTPATH.toString(), "Save.png").toFile();
    private final static File FILE_ICON_BUTTON_SAVEASREPORT = Paths.get(ICONROOTPATH.toString(), "SaveAs.png").toFile();
    private final static File FILE_ICON_BUTTON_SAVEALLREPORT = Paths.get(ICONROOTPATH.toString(), "SaveAll.png").toFile();
    private final static File FILE_ICON_BUTTON_CLOSEREPORT = Paths.get(ICONROOTPATH.toString(), "ReportClose.png").toFile();
    private final static File FILE_ICON_BUTTON_NEWELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementNew.png").toFile();
    private final static File FILE_ICON_BUTTON_CHANGEELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementChange.png").toFile();
    private final static File FILE_ICON_BUTTON_REMOVEELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementRemove.png").toFile();
    private final static File FILE_ICON_BUTTON_REMOVEALLELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementRemoveAll.png").toFile();
    private final static File FILE_ICON_BUTTON_MOVEUPELEMENT = Paths.get(ICONROOTPATH.toString(), "MoveUp.png").toFile();
    private final static File FILE_ICON_BUTTON_MOVEDOWNELEMENT = Paths.get(ICONROOTPATH.toString(), "MoveDown.png").toFile();
    private final static File FILE_ICON_BUTTON_COPYELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementCopy.png").toFile();
    private final static File FILE_ICON_BUTTON_PASTEELEMENT = Paths.get(ICONROOTPATH.toString(), "ElementPaste.png").toFile();
    
    private final static Path TABLEFILEROOTPATH = Paths.get("src", "tables").toAbsolutePath();
    private final static File ITEMFILE = new File("items.tsv");
    private final static String TABLEFILEITEMDELIMITER = "\t";
    
    private HidFormatTable hidFormatTable;
    private HidElementEditor editor;
    private final JFileChooser chooser = new JFileChooser();
    private final ArrayList<HidElementTableRow> copyElementBuffer = new ArrayList<>();
    
    private final JComboBox<String> insertLogicSelector = new JComboBox<>();
    
    // properties
    private final Properties appSettings = new Properties();
    private final Properties appVersions = new Properties();
    private enum AppSettingNames{
        insertLogicOption(InsertLogicOptions.after.name()),
        lastChooserPath(FILE_DEFAULT_FILECHOOSERPATH.toString()),
        appWindowPosX(String.valueOf(INT_DEFAULT_APPPOSX)),
        appWindowPosY(String.valueOf(INT_DEFAULT_APPPOSY)),
        appWindowWidth(String.valueOf(INT_DEFAULT_APPWIDTH)),
        appWindowHeight(String.valueOf(INT_DEFAULT_APPHEIGHT));
        
        private final String sDefault;
        
        private AppSettingNames(String sDefault){
            this.sDefault = sDefault;
        }
        public String getDefault(){
            return this.sDefault;
        }
        
        @Override
        public final String toString(){
            return this.name();
        }
    }
    private enum AppVersionNames{
        mainVersion(STRING_DEFAULT_MAINVERSION),
        subVersion(STRING_DEFAULT_SUBVERSION),
        buildNumber(STRING_DEFAULT_BUILDVERSION);
        
        private final String sDefault;
        
        private AppVersionNames(String sDefault){
            this.sDefault = sDefault;
        }
        public String getDefault(){
            return this.sDefault;
        }
    }
    private void prepareProperties(){
        loadProperties(SETTINGSFILE, appSettings);
        loadProperties(VERSIONSFILE, appVersions);
        for (AppSettingNames setting : AppSettingNames.values()){
            appSettings.putIfAbsent(setting.name(), setting.getDefault());
        }
        for (AppVersionNames setting : AppVersionNames.values()){
            appVersions.putIfAbsent(setting.name(), setting.getDefault());
        }
    }
    private void preserveProperties(){
        setSettingProperty(AppSettingNames.appWindowPosX, String.valueOf(this.getX()));
        setSettingProperty(AppSettingNames.appWindowPosY, String.valueOf(this.getY()));
        setSettingProperty(AppSettingNames.appWindowWidth, String.valueOf(this.getWidth()));
        setSettingProperty(AppSettingNames.appWindowHeight, String.valueOf(this.getHeight()));
        saveProperties(SETTINGSFILE, appSettings);
        saveProperties(VERSIONSFILE, appVersions);
    }
    private void loadProperties(File file, Properties properties){
        try {
            try (FileInputStream inStream = new FileInputStream(file)) {
                properties.load(inStream);
            }
        } catch (IOException | NullPointerException | IllegalArgumentException | SecurityException ex) {
            System.out.println(ex.toString());
        }
    }
    private void saveProperties(File file, Properties properties){
        try {
            file.createNewFile();
            try (FileOutputStream outStream = new FileOutputStream(file)) {
                properties.store(outStream, null);
            }
        } catch (IOException | ClassCastException | IllegalArgumentException | SecurityException ex) {
            System.out.println(ex.toString());
        }
    }
    private int getSettingPropertyInt(AppSettingNames setting){
        try{
            return Integer.valueOf(appSettings.getProperty(setting.name()));
        }catch(NumberFormatException ex){
            return Integer.valueOf(setting.getDefault());
        }
    }
    private void setSettingPropertyFile(AppSettingNames setting, File file){
        appSettings.setProperty(setting.name(), file.toString());
    }
    private File getSettingPropertyFile(AppSettingNames setting){
        try{
            return new File(appSettings.getProperty(setting.name()));
        }catch(Exception ex){
            return new File(setting.getDefault());
        }
    }
    private void setSettingPropertyInsertLogicOption(InsertLogicOptions option){
        setSettingProperty(AppSettingNames.insertLogicOption, option.name());
    }
    private InsertLogicOptions getSettingPropertyInsertLogicOption(){
        AppSettingNames setting = AppSettingNames.insertLogicOption;
        try{
            return InsertLogicOptions.valueOf(appSettings.getProperty(setting.name()));
        }catch(Exception ex){
            return InsertLogicOptions.valueOf(setting.getDefault());
        }
    }
    private void setSettingProperty(AppSettingNames setting, String sValue){
        appSettings.setProperty(setting.name(), sValue);
    }
    private String getVersioProperty(AppVersionNames version){
        return appVersions.getProperty(version.name());
    }
    
    // Events
    private void initUserClass(){
        prepareProperties();
        
        loadVersionInfo();
        this.setTitle(String.format("%s - %s", STRING_APPNAME, STRING_COMPLETEVERSION));
        loadWindowSettings();
        prepareGUIElements();
        
        loadTableData(TABLEFILEITEMDELIMITER, TABLEFILEROOTPATH, ITEMFILE);
        
        this.pack();
        this.revalidate();
        this.repaint();
    }
    private void closeUserClass(){
        var oReportChecker = new Object(){boolean bAnyUnstored = false;};
        for (Component comp : reportPanel.getComponents()){
            if (comp instanceof HidTableContainer) {
                HidTableContainer table = (HidTableContainer)comp;
                if (table.isUnstored()){
                    oReportChecker.bAnyUnstored = true;
                }
            }
        }
        if (!oReportChecker.bAnyUnstored || (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, 
                STRING_MESSAGE_BODY_UNSAFEDAPPCLOSECONFIRM, STRING_MESSAGE_TITLE_UNSAFEDAPPCLOSECONFIRM, 
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE))) {
            preserveProperties();
            System.exit(0);
        }
    }
    @Override
    public void keyTyped(KeyEvent evt) {}
    @Override
    public void keyPressed(KeyEvent evt) {}
    @Override
    public void keyReleased(KeyEvent evt) {
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_C:if(evt.isControlDown()){copyElements();}break;
            case KeyEvent.VK_V:if(evt.isControlDown()){pasteElements();}break;
            case KeyEvent.VK_DELETE:removeElements();break;
            default:break;
        }
    }
    @Override
    public void mouseClicked(MouseEvent evt) {
        if(evt.getClickCount() % 2 == 0){
            Object source = evt.getSource();
            if(Objects.equals(source, itemSelectionList)){
                insertElement(itemSelectionList.getSelectedValue());
            } else if (source instanceof JTable) {
                changeElement();
            }
        }
    }
    @Override
    public void mousePressed(MouseEvent evt) {}
    @Override
    public void mouseReleased(MouseEvent evt) {}
    @Override
    public void mouseEntered(MouseEvent evt) {}
    @Override
    public void mouseExited(MouseEvent evt) {}
    @Override
    public void actionPerformed(ActionEvent evt) {
        Object source = evt.getSource();
        if (source.equals(insertLogicSelector)) {
            saveInsertLogicOption(evt);
        } else if (source instanceof PanelButton) {
            switch(((PanelButton) source).getName()){
                case "newReportButton":createReport();break;
                case "openReportButton":openReport();break;
                case "reloadReportButton":reloadReport();break;
                case "saveReportButton":saveReport();break;
                case "saveAsReportButton":saveAsReport();break;
                case "saveAllReportButton":saveAllReports();break;
                case "closeReportButton":closeReport();break;
                case "newElementButton":insertElement(null);break;
                case "changeElementButton":changeElement();break;
                case "removeElementButton":removeElements();break;
                case "removeAllElementButton":removeAllElements();break;
                case "moveUpElementButton":moveElementUp();break;
                case "moveDownElementButton":moveElementDown();break;
                case "copyElementButton":copyElements();break;
                case "pasteElementButton":pasteElements();break;
                default:break;
            }
        }
    }
    
    // GUI
    private class PanelButton extends JButton{
        public PanelButton(String sName, ActionListener listener, File iconFile, String sTooltip){
            super();
            super.setName(sName);
            super.addActionListener(listener);
            super.setToolTipText(sTooltip);
            super.setIcon(new ImageIcon(iconFile.toString()));
        }
    }
    private void prepareGUIElements(){
        for (SupportedFileType fileType : SupportedFileType.values()){
            chooser.setFileFilter(new FileNameExtensionFilter(fileType.getDescription(), fileType.getExtension()));
        }
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setCurrentDirectory(getSettingPropertyFile(AppSettingNames.lastChooserPath));
        chooser.setPreferredSize(new Dimension(
                Math.round(getWidth() * FLOAT_SIZEFACTOR_SUBWINDOW), Math.round(getHeight() * FLOAT_SIZEFACTOR_SUBWINDOW)));
        
        itemSelectionList.addMouseListener(this);
        refreshInsertLogicSelector();
        
        JPanel reportEditPanel = new JPanel();
        JPanel elementEditPanel = new JPanel();
        reportEditPanel.setLayout(new BoxLayout(reportEditPanel, BoxLayout.LINE_AXIS));
        elementEditPanel.setLayout(new BoxLayout(elementEditPanel, BoxLayout.LINE_AXIS));
        reportEditPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        elementEditPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        reportEditPanel.setBorder(BorderFactory.createEtchedBorder());
        elementEditPanel.setBorder(BorderFactory.createEtchedBorder());
        reportEditPanel.add(new PanelButton("newReportButton", this, FILE_ICON_BUTTON_NEWREPORT, STRING_BUTTON_TOOLTIP_NEWREPORT));
        reportEditPanel.add(new PanelButton("openReportButton", this, FILE_ICON_BUTTON_OPENREPORT, STRING_BUTTON_TOOLTIP_OPENREPORT));
        reportEditPanel.add(new PanelButton("reloadReportButton", this, FILE_ICON_BUTTON_RELOADREPORT, STRING_BUTTON_TOOLTIP_RELOADREPORT));
        reportEditPanel.add(new PanelButton("saveReportButton", this, FILE_ICON_BUTTON_SAVEREPORT, STRING_BUTTON_TOOLTIP_SAVEREPORT));
        reportEditPanel.add(new PanelButton("saveAsReportButton", this, FILE_ICON_BUTTON_SAVEASREPORT, STRING_BUTTON_TOOLTIP_SAVEASREPORT));
        reportEditPanel.add(new PanelButton("saveAllReportButton", this, FILE_ICON_BUTTON_SAVEALLREPORT, STRING_BUTTON_TOOLTIP_SAVEALLREPORT));
        reportEditPanel.add(new PanelButton("closeReportButton", this, FILE_ICON_BUTTON_CLOSEREPORT, STRING_BUTTON_TOOLTIP_CLOSEREPORT));
        elementEditPanel.add(new PanelButton("newElementButton", this, FILE_ICON_BUTTON_NEWELEMENT, STRING_BUTTON_TOOLTIP_NEWELEMENT));
        elementEditPanel.add(new PanelButton("changeElementButton", this, FILE_ICON_BUTTON_CHANGEELEMENT, STRING_BUTTON_TOOLTIP_CHANGEALEMENT));
        elementEditPanel.add(new PanelButton("removeElementButton", this, FILE_ICON_BUTTON_REMOVEELEMENT, STRING_BUTTON_TOOLTIP_REMOVEELEMENT));
        elementEditPanel.add(new PanelButton("removeAllElementButton", this, FILE_ICON_BUTTON_REMOVEALLELEMENT, STRING_BUTTON_TOOLTIP_REMOVEALLELEMENT));
        elementEditPanel.add(new PanelButton("moveUpElementButton", this, FILE_ICON_BUTTON_MOVEUPELEMENT, STRING_BUTTON_TOOLTIP_MOVEUPELEMENT));
        elementEditPanel.add(new PanelButton("moveDownElementButton", this, FILE_ICON_BUTTON_MOVEDOWNELEMENT, STRING_BUTTON_TOOLTIP_MOVEDOWNELEMENT));
        elementEditPanel.add(new PanelButton("copyElementButton", this, FILE_ICON_BUTTON_COPYELEMENT, STRING_BUTTON_TOOLTIP_COPYELEMENT));
        elementEditPanel.add(new PanelButton("pasteElementButton", this, FILE_ICON_BUTTON_PASTEELEMENT, STRING_BUTTON_TOOLTIP_PASTEELEMENT));
        elementEditPanel.add(insertLogicSelector);
        insertLogicSelector.addActionListener(this);
        insertLogicSelector.setToolTipText(STRING_COMBOBOX_TOOLTIP_INSERTSELECT);
        buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        buttonPanel.add(reportEditPanel);
        buttonPanel.add(elementEditPanel);
    }
    private void generateReporting(String sTitle, ArrayList<String> lines, String sConclusion, File file){
        messageArea.setText("");
        if (file != null) {
            messageArea.append(String.format("%s\r\n -> %s\r\n", sTitle, file.getAbsolutePath()));
        } else  {
            messageArea.append(String.format("%s\r\n", sTitle));
        }
        if (lines != null) {
            messageArea.append("\r\n");
            lines.forEach(line ->{
                messageArea.append(String.format("  %s\r\n", line));
            });
        }
        if (sConclusion != null) {
            messageArea.append(String.format("\r\n%s\r\n", sConclusion));
        }
    }
    private String combineTableName(HidTableContainer table){
        return String.format("%s%s", table.getTableName(), ((table.isUnstored()) ? "*" : ""));
    }
    private void addTableTab(HidTableContainer table){
        reportPanel.addTab("", table);
        int iIndex = reportPanel.indexOfComponent(table);
        JLabel tab = new JLabel(combineTableName(table));
        tab.addKeyListener(this);
        reportPanel.setTabComponentAt(iIndex, tab);
        reportPanel.setSelectedIndex(iIndex);
    }
    private void refreshTableName(int iIndex, HidTableContainer table){
        Component comp = reportPanel.getTabComponentAt(iIndex);
        if (comp instanceof JLabel){
            ((JLabel)comp).setText(combineTableName(table));
        }
    }
    private void refreshItemSelectionList(HidFormatTable table){
        DefaultListModel<String> model = new DefaultListModel<>();
        table.getIdentifierNameList().forEach(identifier -> {
            model.addElement(identifier);
        });
        itemSelectionList.setModel(model);
    }
    private enum InsertLogicOptions{
        before("Insert before"),
        after("Insert after");
        
        private final String sDisplayName;
        public static boolean UPDATING = true;
        
        private InsertLogicOptions(String sDisplayName){
            this.sDisplayName = sDisplayName;
        }
        
        public final String getDisplayName(){
            return this.sDisplayName;
        }
        public static final InsertLogicOptions findByDisplayName(String sDisplayName) throws IllegalArgumentException{
            for (InsertLogicOptions option : InsertLogicOptions.values()){
                if (option.sDisplayName.equals(sDisplayName)){
                    return option;
                }
            }
            throw new IllegalArgumentException("Not supproted display name");
        }
        public final boolean isAfter(){
            return (this == InsertLogicOptions.after);
        }
    }
    private void refreshInsertLogicSelector(){
        InsertLogicOptions.UPDATING = true;
        insertLogicSelector.removeAllItems();
        for (InsertLogicOptions option : InsertLogicOptions.values()){
            insertLogicSelector.addItem(option.getDisplayName());
        }
        InsertLogicOptions selectedoption = getSettingPropertyInsertLogicOption();
        insertLogicSelector.setSelectedItem(selectedoption.getDisplayName());
        InsertLogicOptions.UPDATING = false;
    }
    private void saveInsertLogicOption(ActionEvent evt){
        Object source = evt.getSource();
        if (!InsertLogicOptions.UPDATING && source.equals(insertLogicSelector)){
            JComboBox selector = (JComboBox)source;
            String sOption = String.valueOf(selector.getSelectedItem());
            InsertLogicOptions option;
            try{
                option = InsertLogicOptions.findByDisplayName(sOption);
            }catch(IllegalArgumentException ex){
                option = InsertLogicOptions.valueOf(AppSettingNames.insertLogicOption.getDefault());
            }
            setSettingPropertyInsertLogicOption(option);
        }
    }
    
    //Report handling
    private void createReport(){
        HidTableContainer table = new HidTableContainer(this, this, hidFormatTable);
        addTableTab(table);
        generateReporting(STRING_MESSAGE_TITLE_REPORTCREATED_OK, null, null, null);
    }
    private void openReport(){
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File sourceFile = chooser.getSelectedFile();
            setSettingPropertyFile(AppSettingNames.lastChooserPath, chooser.getCurrentDirectory());
            try {
                HidTableContainer table = new HidTableContainer(this, this, hidFormatTable, sourceFile);
                addTableTab(table);
                if (table.hasError()){
                    generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_MINORERROR, table.getErrors(), null, sourceFile);
                } else {
                    generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_OK, null, null, sourceFile);
                }
            } catch (IOException | SecurityException | IllegalArgumentException ex) {
                generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_FATALERROR, null, ex.toString(), sourceFile);
            }
        }
    }
    private void reloadReport(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if (!table.isUnstored() || JOptionPane.showConfirmDialog(this, STRING_MESSAGE_BODY_REPORTRELOADCONFIRM, STRING_MESSAGE_TITLE_REPORTRELOADCONFIRM, 
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                    File sourceFile = chooser.getSelectedFile();
                    setSettingPropertyFile(AppSettingNames.lastChooserPath, chooser.getCurrentDirectory());
                    try{
                        table.load(sourceFile);
                        refreshTableName(iSelectedIndex, table);
                        if (table.hasError()){
                            generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_MINORERROR, table.getErrors(), null, sourceFile);
                        } else {
                            generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_OK, null, null, sourceFile);
                        }
                    } catch (IOException | SecurityException | IllegalArgumentException ex) {
                        generateReporting(STRING_MESSAGE_TITLE_REPORTFILELOAD_FATALERROR, null, ex.toString(), sourceFile);
                    }
                }
            }
        }
    }
    private void saveReport(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            try{
                File targetFile = table.save();
                refreshTableName(iSelectedIndex, table);
                generateReporting(STRING_MESSAGE_TITLE_REPORTFILESAVE_OK, null, null, targetFile);
            } catch(IOException | IllegalArgumentException ex){
                saveAsReport();
            }
        }
    }
    private void saveAsReport(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            chooser.setSelectedFile(table.getFile());
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File targetFile = chooser.getSelectedFile();
                setSettingPropertyFile(AppSettingNames.lastChooserPath, chooser.getCurrentDirectory());
                try{
                    table.save(targetFile);
                    refreshTableName(iSelectedIndex, table);
                    generateReporting(STRING_MESSAGE_TITLE_REPORTFILESAVE_OK, null, null, targetFile);
                } catch (IOException | IllegalArgumentException ex) {
                    generateReporting(STRING_MESSAGE_TITLE_REPORTFILESAVE_FATALERROR, null, ex.toString(), targetFile);
                }
            }
        }
    }
    private void saveAllReports(){
        ArrayList<String> resultTable = new ArrayList<>();
        for (Component comp : reportPanel.getComponents()){
            if (comp instanceof HidTableContainer) {
                HidTableContainer table = (HidTableContainer)comp;
                if (table.isUnstored()) {
                    String sMessage; 
                    try{
                        File file = table.save();
                        refreshTableName(reportPanel.indexOfComponent(comp), table);
                        sMessage = String.format("%s %s %s", table.getTableName(), STRING_MESSAGE_SAVEALLREPORTS_SAVEDAS, file.getAbsolutePath());
                    } catch (IOException | IllegalArgumentException ex) {
                        sMessage = String.format("%s %s: %s", table.getTableName(), STRING_MESSAGE_SAVEALLREPORTS_NOTSAVED, ex.toString());
                    }
                    resultTable.add(sMessage);
                }
            }
        }
        generateReporting(STRING_TITLE_SAVEALLREPORTS, resultTable, 
                String.format("%s: %d", STRING_CONCLUSION_SAVEALLREPORTS, resultTable.size()), null);
    }
    private void closeReport(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if (!table.isUnstored() || JOptionPane.showConfirmDialog(this, STRING_MESSAGE_BODY_REPORTCLOSECONFIRM, STRING_MESSAGE_TITLE_REPORTCLOSECONFIRM, 
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                reportPanel.remove(iSelectedIndex);
            }
        }
    }
    private void removeElements(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if(table.removeSelectedRows() > 0){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    private void removeAllElements(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if (JOptionPane.showConfirmDialog(this, STRING_MESSAGE_BODY_REMOVEROWSCONFIRM, STRING_MESSAGE_TITLE_REMOVEROWSCONFIRM, 
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                if (table.removeAllRows() > 0){
                    refreshTableName(iSelectedIndex, table);
                }
            }
        }
    }
    private void moveElementUp(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if(table.moveSelectedRowsUp() > 0){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    private void moveElementDown(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if(table.moveSelectedRowsDown() > 0){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    private void copyElements(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            copyElementBuffer.clear();
            copyElementBuffer.addAll(table.getSelectedElementRows());
        }
    }
    private void pasteElements(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            ArrayList<HidElementTableRow> pasteElementBuffer = new ArrayList<>();
            copyElementBuffer.forEach(row -> {pasteElementBuffer.add(new HidElementTableRow(row));});
            boolean bInsertAfter = getSettingPropertyInsertLogicOption().isAfter();
            if (table.insertElementRowsAtSelection(pasteElementBuffer, bInsertAfter) > 0){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    private void insertElement(String sIdentifierName){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if ((iSelectedIndex >= 0) && (hidFormatTable != null)) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            boolean bInsertAfter = getSettingPropertyInsertLogicOption().isAfter();
            byte bIdentifier = hidFormatTable.findIdentifier(sIdentifierName);
            HidElementTableRow newRow = null;
            if (hidFormatTable.isDataNeeding(bIdentifier)){
                if (editor.showCreationDialog(sIdentifierName, table.findParentUsagePageValue(bInsertAfter)) == HidElementEditor.CONFIRMED) {
                    newRow = editor.getCreatedRow();
                }
            } else {
                newRow = new HidElementTableRow(bIdentifier, null, hidFormatTable);
            }
            if ((newRow != null) && table.insertElementRowAtSelection(newRow, bInsertAfter)){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    private void changeElement(){
        int iSelectedIndex = reportPanel.getSelectedIndex();
        if (iSelectedIndex >= 0) {
            HidTableContainer table = (HidTableContainer)reportPanel.getComponentAt(iSelectedIndex);
            if (table.changeElementRowsAtSelection(editor) > 0){
                refreshTableName(iSelectedIndex, table);
            }
        }
    }
    
    // loading
    private void checkWindowSettings(){
        Dimension displaySize = Toolkit.getDefaultToolkit().getScreenSize();
        int iPosX = getSettingPropertyInt(AppSettingNames.appWindowPosX);
        int iPosY = getSettingPropertyInt(AppSettingNames.appWindowPosY);
        int iWidth = getSettingPropertyInt(AppSettingNames.appWindowWidth);
        int iHeight = getSettingPropertyInt(AppSettingNames.appWindowHeight); 
        if (iWidth < INT_DEFAULT_APPWIDTH) {
            iWidth = INT_DEFAULT_APPWIDTH;
            iPosX = Math.round((displaySize.width - iWidth) * 0.5f);
        } else if (iWidth > displaySize.width) {
            iWidth = Math.round(displaySize.width * 0.9f);
            iPosX = Math.round((displaySize.width - iWidth) * 0.5f);
        }
        if (iPosX > (displaySize.width * 0.8f) || iPosX < (iWidth * -0.8f)) {
            iPosX = Math.round((displaySize.width - iWidth) * 0.5f);
        }
        if (iHeight < INT_DEFAULT_APPHEIGHT) {
            iHeight = INT_DEFAULT_APPHEIGHT;
            iPosY = Math.round((displaySize.height - iHeight) * 0.5f);
        } else if (iHeight > displaySize.height) {
            iHeight = Math.round(displaySize.height * 0.9f);
            iPosY = Math.round((displaySize.height - iHeight) * 0.5f);
        }
        if (iPosY > (displaySize.height * 0.8f) || iPosY < (iHeight * -0.8f)) {
            iPosY = Math.round((displaySize.height - iHeight) * 0.5f);
        }
        setSettingProperty(AppSettingNames.appWindowPosX, String.valueOf(iPosX));
        setSettingProperty(AppSettingNames.appWindowPosY, String.valueOf(iPosY));
        setSettingProperty(AppSettingNames.appWindowWidth, String.valueOf(iWidth));
        setSettingProperty(AppSettingNames.appWindowHeight, String.valueOf(iHeight));
    }
    private void loadWindowSettings(){
        checkWindowSettings();
        int iPosX = getSettingPropertyInt(AppSettingNames.appWindowPosX);
        int iPosY = getSettingPropertyInt(AppSettingNames.appWindowPosY);
        int iWidth = getSettingPropertyInt(AppSettingNames.appWindowWidth);
        int iHeight = getSettingPropertyInt(AppSettingNames.appWindowHeight);
        this.setPreferredSize(new Dimension(iWidth, iHeight));
        this.setLocation(iPosX, iPosY);
    }
    private void loadVersionInfo(){
        String sMainVersion = getVersioProperty(AppVersionNames.mainVersion);
        String sSubVersion = getVersioProperty(AppVersionNames.subVersion);
        String sBuildVersion = getVersioProperty(AppVersionNames.buildNumber).replace(".", "").replace(",", "");
        STRING_COMPLETEVERSION = String.format("%s.%s.%s", sMainVersion, sSubVersion , sBuildVersion);
    }
    private void loadTableData(String sDelimiter, Path rootPath, File file){
        try{
            hidFormatTable = new HidFormatTable(sDelimiter, rootPath, file);
            if (hidFormatTable.hasError()){
                generateReporting(STRING_MESSAGE_TITLE_FORMATTABLELOAD_MINORERROR, hidFormatTable.getErrors(), null, file);
            } else {
                generateReporting(STRING_MESSAGE_TITLE_FORMATTABLELOAD_OK, null, null, file);
            }
            refreshItemSelectionList(hidFormatTable);
            editor = new HidElementEditor(this, hidFormatTable);
        }catch(RuntimeException ex){
            hidFormatTable = null;
            generateReporting(STRING_MESSAGE_TITLE_FORMATTABLELOAD_FATALERROR, null, ex.toString(), file);
        }
    }
}
